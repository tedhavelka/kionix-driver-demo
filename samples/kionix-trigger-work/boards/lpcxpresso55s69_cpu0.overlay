/*
# lpc55x69 dev kit dts file of interest is zephyr/boards/arm/lpcxpresso55s69/lpcxpresso55s69.dtsi
*/

/ {
    aliases {
        uart2 = &flexcomm2;
        i2c0 = &flexcomm4;
        sensorinterrupt1 = &iis2dhint1;
        kx132-instance-1 = &kionix_sensor_1;
    };
};



&green_led {
    status = "okay";
};

&blue_led {
    status = "okay";
};

&red_led {
    status = "okay";
};


/*
# Reference - file where flexcomm nodes enabled for lpc55s69 MCU:
# zephyr/boards/arm/lpcxpresso55s69/lpcxpresso55s69_cpu0.dts
#
# In spite of comment at
# REF https://github.com/zephyrproject-rtos/zephyr/blob/main/boards/arm/lpcxpresso55s69/lpcxpresso55s69-pinctrl.dtsi#L21
# SPI transceive calls work as expected with &flexcomm2 enabled as UART device - TMH
*/

&flexcomm2 {
    compatible = "nxp,lpc-usart";
    current-speed = <115200>;
    status = "okay";
};



/*
# See actinius_icarus_common.dts for example of calling out interrupt
#  lines for related LIS2DH sensor.
# See LPCXpresso55S69_Board_Schematic_RevA2_dec4.pdf for GPIOs available
#  on lpcxpresso55s69 dev kit.

# 2022-12-01 - We know &gpio1 pin 9 works as IIS2DH interrupt, which
#  is configured active low.  So per above linked schematic we can safely
#  assume PIO1_10 (gpio1 pin 10) will work as well, but we must review
#  KX132 datasheet for interrupt active level - TMH
#
#   Looks like KX132-1211-Technical-Reference-Manual-Rev-5.0.pdf page 27
#  talks about INC1 bit 4, IEA1 bit determines whether interrupt is
#  active ow or active high.
*/

&flexcomm4 {
/*
#        kionix_sensor_1: kx132@1f {
#                compatible = "kionix,kx132_1211";
#                reg = <0x1F>;
#                drdy-gpios = <&gpio1 9 GPIO_ACTIVE_HIGH>;
#        };
*/

/*
# Note:  Ted unsure whether 'interrupt-parent' node property needed to support interrupts
*/
        stmicro_sensor: iis2dh@18 {
                compatible = "st,iis2dh";
                reg = <0x18>;
                interrupt-parent = <&gpio1>;
                drdy-gpios = <&gpio1 10 GPIO_ACTIVE_LOW>;
        };
};



/*
# 2022-11-08 work to manually add an interrupt in Zephyr code testing IIS2DH, outside of sensor API calls.
# Note:  idea and code here borrowed from zephyr/samples/basic/button project.
*/

/ {
        sensor_interrupts {
                compatible = "gpio-keys";
                iis2dhint1: iis2dh_int1 {
                        gpios = < &gpio1 9 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
                };
                /* ... other buttons ... */
        };
};



/*
# ----------------------------------------------------------------------
# 2022-11-09 - Move of IIS2DH from I2C bus to SPI bus . . .
# REF zephyr/boards/arm/lpcxpresso55s69/lpcxpresso55s69.dtsi
# Note, 'arduino_spi' is a nodelabel for &hs_lspi, defined as follows:
#
# 207 &hs_lspi {
# 208         pinctrl-0 = <&pinmux_hs_lspi_default>;
# 209         pinctrl-names = "default";
# 210 };
#
# some further definition of &hs_lspi node in file ___:
#
# 122 &hs_lspi {
# 123         status = "okay";
# 124         dmas = <&dma0 2>, <&dma0 3>;
# 125         dma-names = "rx", "tx";
# 126         cs-gpios = <&gpio1 1 GPIO_ACTIVE_LOW>;
# 127 };
#
# Compilation artifact [project]/build/zephyr/zephyr.dts shows some additional
# dts node properties but the important thing is that we can see from
# these two NXP dts board files that &hs_lspi is enabled.
# ----------------------------------------------------------------------
*/

&arduino_spi {
/*
#        iis2dh@0 {
#                compatible = "st,iis2dh";
#                reg = <0>;
#                spi-max-frequency = <250000>; / *** conservatively set to 1MHz *** /
#                status = "okay";
#        };
*/
        kionix_sensor_1: kx132@0 {
                compatible = "kionix,kx132_1211";
                reg = <0>;
                spi-max-frequency = <1000000>;
                drdy-gpios = <&gpio1 9 GPIO_ACTIVE_HIGH>;
        };
};


/* From project build artifact 'zephyr.dts', combines lpcxpresso55s69.dtsi and lpcxpresso55s69-pinctrl.dtsi:
# hs_lspi: arduino_spi: mikrobus_spi: spi@9f000 { ... };
*/

/*
# Overlay entry to free GPIO pins P0_26, P1_1, P1_2, P1_3 for general purpose use:

# &hs_lspi {
#     status = "disabled";
# };
*/



